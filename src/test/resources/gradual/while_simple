// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/


field f: Int

method t0()
{
  var n: Int := 0

  while(n < 5)
    invariant ? && true
  {
    n := n + 1
  }

}


// ? can be 0 <= n, so should pass
method t1_1(n: Int) returns ()
{
    var i: Int := 0

    while (i < n)
        invariant ? && i <= n
    {
        i := i+1
    }
}

// again ? can be 0 <= n, so should pass
method t1_2(n: Int) returns ()
    requires ?
{
    var i: Int := 0

    while (i < n)
        invariant i <= n
    {
        i := i+1
    }
}

// ? can also be 2 <= n, so this should pass too
method t1_3(n: Int) returns ()
    requires ?
{
    var i: Int := 2

    while (i < n)
        invariant i <= n
    {
        i := i+1
    }
}

// this should fail because n cannot be < 2 and >= 2
method t1_3(n: Int) returns ()
    requires ?
{
    var i: Int := 2

    assert n < 2

    while (i < n)
        invariant i <= n
    {
        i := i+1
    }
}



// ? takes the place of acc(r.f, write)
method t2(n: Int, r: Ref) returns ()
    requires ? && n > 0
{
    var i: Int := 2

    while (i < (r.f))
        invariant acc(r.f, write)
    {
        i := i+1
    }
}


method t3(r: Ref) returns ()
{
    var i: Int := 1
    var j: Int := 2

    while (true)
    {
        assert i == 1
        //:: ExpectedOutput(assert.failed:assertion.false)
        assert j == 2
        j := j+1
    }
}

// ? can optimistically be false, so should pass
method t3_2(r: Ref) returns ()
{
    var i: Int := 1
    var j: Int := 2

    while (? && true)
    {
        assert i == 1
        assert j == 2
        j := j+1
    }
}


method t4(r: Ref) returns ()
    requires acc(r.f, write)
{
    var j: Int := 2
    while (j < (r.f))
        invariant ? && true
    {
        j := j+1
    }
    assert j >= (r.f)
}

method t4_2(r: Ref) returns ()
    requires acc(r.f, write)
{
    var j: Int := 2

    //:: ExpectedOutput(while.failed:insufficient.permission)
    while (j < (r.f))
    {
        j := j+1
    }
    assert j >= (r.f)
}

method t5(r: Ref) returns ()
  requires r != null
{
    var j: Int := 2

    while (j < 3)
        //:: ExpectedOutput(not.wellformed:insufficient.permission)
        //:: ExpectedOutput(invariant.not.established:assertion.false)
        //:: MissingOutput(invariant.not.established:assertion.false, /Silicon/issue/34/)
        invariant r != null && r.f == 2
    {
        j := j+1
    }
}

// should still fail because invariant not self-framed
method t5_2(r: Ref) returns ()
  requires ? && r != null
{
    var j: Int := 2

    while (j < 3)
        //:: ExpectedOutput(not.wellformed:insufficient.permission)
        //:: ExpectedOutput(invariant.not.established:assertion.false)
        //:: MissingOutput(invariant.not.established:assertion.false, /Silicon/issue/34/)
        invariant r != null && r.f == 2
    {
        j := j+1
    }
}


method t5_3(r: Ref) returns ()
  requires ? && r != null
{
    var j: Int := 2

    while (j < 3)
        //:: ExpectedOutput(invariant.not.established:assertion.false)
        //:: MissingOutput(invariant.not.established:assertion.false, /Silicon/issue/34/)
        invariant acc(r.f, write) && r != null && r.f == 2
    {
        j := j+1
    }
}
